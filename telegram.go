package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"syscall"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// startTelegramBot –∑–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞
func startTelegramBot(config *Config, timeData *TimeData, dataPath string) {
	log.Println("Starting Telegram bot...")

	bot, err := tgbotapi.NewBotAPI(config.Telegram.BotToken)
	if err != nil {
		log.Printf("Failed to create bot: %v", err)
		return
	}

	bot.Debug = false
	log.Printf("Authorized on account @%s", bot.Self.UserName)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
	startMsg := tgbotapi.NewMessage(config.Telegram.AdminID,
		"üü¢ Screen Time Control –∑–∞–ø—É—â–µ–Ω\n\n"+
			"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"+
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
	if _, err := bot.Send(startMsg); err != nil {
		log.Printf("Failed to send startup notification: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM, syscall.SIGINT)

	go func() {
		<-sigChan
		log.Println("Received shutdown signal")
		cancel()
	}()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	log.Println("Telegram bot is ready to receive commands")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
	defer func() {
		log.Println("Telegram bot shutting down...")
		stopMsg := tgbotapi.NewMessage(config.Telegram.AdminID,
			"üî¥ Screen Time Control –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"+
				"–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.\n"+
				"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
		bot.Send(stopMsg)
		bot.StopReceivingUpdates()
	}()

	for {
		select {
		case <-ctx.Done():
			log.Println("Context cancelled, stopping bot")
			return
		case update := <-updates:
			if update.Message == nil {
				continue
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
			if update.Message.From.ID != config.Telegram.AdminID {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
				bot.Send(msg)
				log.Printf("Unauthorized access attempt from user ID: %d", update.Message.From.ID)
				continue
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
			handleCommand(bot, update.Message, config, dataPath)
		}
	}
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞
func handleCommand(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, config *Config, dataPath string) {
	log.Printf("Received command from admin: %s", msg.Text)

	// –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–æ–π
	timeData, err := loadTimeData(dataPath, config.TimeLimit.DailyMinutes)
	if err != nil {
		log.Printf("Error loading time data: %v", err)
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
		bot.Send(reply)
		return
	}

	var responseText string

	switch msg.Command() {
	case "start", "help":
		responseText = "ü§ñ Screen Time Control Bot\n\n" +
			"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
			"/status - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n" +
			"/add <–º–∏–Ω—É—Ç—ã> - –¥–æ–±–∞–≤–∏—Ç—å –º–∏–Ω—É—Ç—ã –∫ –ª–∏–º–∏—Ç—É\n" +
			"/remove <–º–∏–Ω—É—Ç—ã> - —É–±—Ä–∞—Ç—å –º–∏–Ω—É—Ç—ã –∏–∑ –ª–∏–º–∏—Ç–∞\n" +
			"/unlock - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" +
			"/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"

	case "status":
		remaining := timeData.DailyLimit - timeData.UsedMinutes
		if remaining < 0 {
			remaining = 0
		}

		statusEmoji := "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
		if timeData.IsBlocked {
			statusEmoji = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
		}

		responseText = fmt.Sprintf(
			"üìä –°—Ç–∞—Ç—É—Å —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"+
				"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n"+
				"üìÖ –î–∞—Ç–∞: %s\n\n"+
				"‚è± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %d –º–∏–Ω / %d –º–∏–Ω\n"+
				"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: %d –º–∏–Ω\n"+
				"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %.1f%%\n\n"+
				"–°—Ç–∞—Ç—É—Å: %s\n"+
				"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: %s",
			config.Windows.Username,
			timeData.Date,
			timeData.UsedMinutes,
			timeData.DailyLimit,
			remaining,
			float64(timeData.UsedMinutes)/float64(timeData.DailyLimit)*100,
			statusEmoji,
			timeData.LastCheck.Format("15:04:05"),
		)

	case "add":
		args := msg.CommandArguments()
		if args == "" {
			responseText = "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç.\n–ü—Ä–∏–º–µ—Ä: /add 30"
			break
		}

		minutes, err := strconv.Atoi(strings.TrimSpace(args))
		if err != nil || minutes <= 0 {
			responseText = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
			break
		}

		timeData.DailyLimit += minutes
		if err := saveTimeData(dataPath, timeData); err != nil {
			log.Printf("Error saving time data: %v", err)
		}

		responseText = fmt.Sprintf(
			"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ %d –º–∏–Ω—É—Ç\n\n"+
				"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: %d –º–∏–Ω—É—Ç\n"+
				"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %d –º–∏–Ω—É—Ç\n"+
				"–û—Å—Ç–∞–ª–æ—Å—å: %d –º–∏–Ω—É—Ç",
			minutes,
			timeData.DailyLimit,
			timeData.UsedMinutes,
			timeData.DailyLimit-timeData.UsedMinutes,
		)

		log.Printf("Admin added %d minutes. New limit: %d", minutes, timeData.DailyLimit)

	case "remove":
		args := msg.CommandArguments()
		if args == "" {
			responseText = "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç.\n–ü—Ä–∏–º–µ—Ä: /remove 15"
			break
		}

		minutes, err := strconv.Atoi(strings.TrimSpace(args))
		if err != nil || minutes <= 0 {
			responseText = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
			break
		}

		timeData.DailyLimit -= minutes
		if timeData.DailyLimit < 0 {
			timeData.DailyLimit = 0
		}
		if err := saveTimeData(dataPath, timeData); err != nil {
			log.Printf("Error saving time data: %v", err)
		}

		responseText = fmt.Sprintf(
			"‚úÖ –£–±—Ä–∞–Ω–æ %d –º–∏–Ω—É—Ç\n\n"+
				"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: %d –º–∏–Ω—É—Ç\n"+
				"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %d –º–∏–Ω—É—Ç\n"+
				"–û—Å—Ç–∞–ª–æ—Å—å: %d –º–∏–Ω—É—Ç",
			minutes,
			timeData.DailyLimit,
			timeData.UsedMinutes,
			timeData.DailyLimit-timeData.UsedMinutes,
		)

		log.Printf("Admin removed %d minutes. New limit: %d", minutes, timeData.DailyLimit)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è
		if timeData.UsedMinutes >= timeData.DailyLimit && !timeData.IsBlocked {
			blockUser(config.Windows.Username)
			timeData.IsBlocked = true
			saveTimeData(dataPath, timeData)
			responseText += "\n\n‚ö†Ô∏è –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
		}

	case "unlock":
		if !timeData.IsBlocked {
			responseText = "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
			break
		}

		unblockUser(config.Windows.Username)
		timeData.IsBlocked = false
		if err := saveTimeData(dataPath, timeData); err != nil {
			log.Printf("Error saving time data: %v", err)
		}

		responseText = fmt.Sprintf(
			"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"+
				"–ú–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"+
				"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %d/%d –º–∏–Ω—É—Ç",
			config.Windows.Username,
			timeData.UsedMinutes,
			timeData.DailyLimit,
		)

	default:
		responseText = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	reply := tgbotapi.NewMessage(msg.Chat.ID, responseText)
	if _, err := bot.Send(reply); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}
